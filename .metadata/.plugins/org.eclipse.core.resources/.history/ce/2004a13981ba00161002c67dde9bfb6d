/**
 * 
 */

/**
	Kelly Luo
	9/24/16
	APCS2 
	This code is a library for math calculation methods.
 *
 */
public class Calculate {

	/**
	 * @param args
	 */
	public static int square (int num){
		return(num*num);
	}
	
	public static int cube(int num){
		return(num*num*num);
	}
	
	public static double average(double num, double secNum){
		return((num + secNum) / 2);
	}
	
	public static double average(double num, double secNum, double thirdNum){
		return((num + secNum + thirdNum) / 3);
	}
	
	public static double toDegrees(double num){
		return(num * (180/3.14159));
	}
	
	public static double toRadians(double num){
		return(num * (3.14159/180));
	}
	
	public static double discriminant(double a, double b, double c){
		return(b * b - (4 * a * c));
	}
	
	public static String toImproperFrac(int wholeNum, int numerator, int denominator){

		int numeratorOfAnswer = wholeNum * denominator + numerator;
		return(numeratorOfAnswer + "/" + denominator);
	}
	
	public static String toMixedNum(int num, int secNum){
		int wholeNum = num / secNum;
		int numerator = num % secNum;
		return(wholeNum + " " + numerator + "/" + secNum);
		
	}
	public static String foil(int a, int b, int c, int d, String x){
		int firstFoil = a * c;
		int secFoil = (a * d) + (b * c); 
		int thirdFoil = (b * d);
		return(firstFoil + x + "^2" + "+" + secFoil + x + "+" + thirdFoil);
	}
	
	public static boolean isDivisibleBy(int num, int secNum){
		if(num % secNum == 0){
			return(true);
		}else{
			return(false);
		}
	}
	
	public static double absValue(double num){
		double makePositive = -1;
		if(num < 0){
			double positive = num * makePositive;
			return(positive);
		}else{
			return(num);
		}
	}
	
	public static int max(int num, int secNum){
		if(num > secNum){
			return(num);
		}else{
			return(secNum);
		}
	}
	
	public static double max(double num, double secNum, double thirdNum){
		if(num < thirdNum && secNum < thirdNum){
			return(thirdNum);
		}if(thirdNum < num && secNum < num){
			return(num);
		}else{
			return(secNum);
		}
	}
	
	public static int min(int num, int secNum){
		if(num < secNum){
			return(num);
		}else{
			return(secNum);
		}
	}
	
	public static double round2(double num){

		double round = num + .5;
		double hundreds = round * 10;
		int decimal = (int)(hundreds/10);
		double result = (double)(decimal);
		return(result);

	}
	
	public static double exponent(int base, double power){
		if(power < 0){
			throw new IllegalArgumentException("The power must be positive.");
		}
		double result = 1.0;
		if(power == 0){
			return(1);
		}
		for(int i = 1; i <= power; i++){
			result *= base;
		}
		return(result);
	}
	
	public static int factorial(int num){
		if(num < 0){
			throw new IllegalArgumentException("The number must be positive.");
		}
		int result = 1;
		if(num == 0){
			return(1);
		}
		for(int i = 1; i <= num; i++){
			result *= i;
		}
		return(result);
	}
	
	public static boolean isPrime(int num){
		boolean makeSure;
		for (int i = num - 1; i > 1; i--){
			makeSure = Calculate.isDivisibleBy(num, i);
			if(makeSure == true){
				return(false);
			}
		}
		return(true);		
	}
	
	public static int gcf(int a, int b){
        int gcf = 1;
        for(int i = 1; i <= a; i++){
            if(isDivisibleBy(a,i) && isDivisibleBy(b,i)){
                gcf = i;
            }
        }
        return(gcf);
    }
	
	public static double sqrt(double num){
		if (num < 0){
			throw new IllegalArgumentException("Number must be positive");
		}
		for(double i = 0.01; i <= num; i += 0.01){
			double square = i * i;
				if (Calculate.absValue(square - num) <= .01){
					return Calculate.round2(i);
				} 
		}
		return(num);
	}
	
    public static String quadForm(int a, int b, int c){
        double firstRoot;
        double secRoot;
        int discrim = (int) Calculate.discriminant(a, b, c);
        if (discrim < 0){
            return ("No real roots");
        }
        if (discrim == 0){
            firstRoot = b * (-1) / (2 * a);
            firstRoot = Calculate.round2(firstRoot);
            return ("The root is: " + firstRoot);
        }
        if (discrim > 0){
            firstRoot = (b * (-1) + sqrt(discrim)) / (2 * a);
            firstRoot = Calculate.round2(firstRoot);
            secRoot = (b * (-1) - sqrt(discrim)) / (2 * a);
            secRoot = Calculate.round2(secRoot);
            double min = Calculate.min((int) firstRoot, (int) secRoot);
            double max = Calculate.max((int) firstRoot, (int) secRoot);
            return ("The roots are: " + min + " and " + max);
        }
        return ("");
    }
}
